#!/bin/bash

# ===================================================================
# SCRIPT D'AUDIT COMPLET - PATRIMOINE MANAGER
# ===================================================================

# Configuration
AUDIT_DIR="audit"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
REPORT_FILE="$AUDIT_DIR/AUDIT_REPORT_$TIMESTAMP.md"
PROJECT_ROOT="$(dirname "$0")/.."

# Couleurs pour l'output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${GREEN}üîç AUDIT COMPLET - PATRIMOINE MANAGER${NC}"
echo "üìÖ Date: $(date)"
echo "üïí Timestamp: $TIMESTAMP"
echo "üìÅ Dossier audit: $AUDIT_DIR"
echo "=" | tr ' ' '=' | head -c 60; echo

# Cr√©er la structure d'audit
mkdir -p $AUDIT_DIR/{logs,reports,charts}
cd "$PROJECT_ROOT"

# Fonction pour ex√©cuter et logger
run_audit() {
    local name=$1
    local command=$2
    local output_file=$3
    
    echo -e "\n${YELLOW}üìä $name...${NC}"
    
    if [ -n "$output_file" ]; then
        eval $command > "$output_file" 2>&1
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ $name termin√©${NC}"
        else
            echo -e "${RED}‚ùå $name √©chou√©${NC}"
        fi
    else
        eval $command
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ $name termin√©${NC}"
        else
            echo -e "${RED}‚ùå $name √©chou√©${NC}"
        fi
    fi
}

# ===================================================================
# 1. AUDIT BASE DE DONN√âES
# ===================================================================

echo -e "\n${BLUE}üìä 1. AUDIT BASE DE DONN√âES${NC}"

# V√©rifier si PostgreSQL est en cours d'ex√©cution
run_audit "V√©rification PostgreSQL" "
if docker ps --format '{{.Names}}' | grep -q 'postgres'; then
    echo 'PostgreSQL: ACTIF ‚úÖ'
    docker exec \$(docker ps --format '{{.Names}}' | grep postgres) pg_isready
else
    echo 'PostgreSQL: INACTIF ‚ùå'
fi
" "$AUDIT_DIR/db-status.txt"

# Statistiques de base de donn√©es
run_audit "Statistiques BDD" "
if docker ps --format '{{.Names}}' | grep -q 'postgres'; then
    POSTGRES_CONTAINER=\$(docker ps --format '{{.Names}}' | grep postgres | head -1)
    docker exec \$POSTGRES_CONTAINER psql -U patrimoine_user -d patrimoine -c \"
    SELECT 'Database Size' as metric, pg_size_pretty(pg_database_size('patrimoine')) as value
    UNION ALL
    SELECT 'Total Tables' as metric, COUNT(*)::text as value FROM information_schema.tables WHERE table_schema = 'public'
    UNION ALL
    SELECT 'User Count' as metric, COUNT(*)::text as value FROM \\\"User\\\"
    UNION ALL
    SELECT 'Asset Count' as metric, COUNT(*)::text as value FROM \\\"Asset\\\"
    UNION ALL
    SELECT 'Entity Count' as metric, COUNT(*)::text as value FROM \\\"Entity\\\";
    \"
else
    echo 'PostgreSQL non disponible'
fi
" "$AUDIT_DIR/db-stats.txt"

# ===================================================================
# 2. AUDIT PRISMA
# ===================================================================

echo -e "\n${BLUE}üìä 2. AUDIT PRISMA${NC}"

# Validation du sch√©ma Prisma
run_audit "Validation Prisma" "npx prisma validate" "$AUDIT_DIR/prisma-validation.txt"

# Statut des migrations
run_audit "Statut migrations" "npx prisma migrate status" "$AUDIT_DIR/migrations-status.txt"

# Analyse des relations
run_audit "Analyse relations" "
grep -E 'relation|@relation' prisma/schema.prisma | head -20
" "$AUDIT_DIR/relations-summary.txt"

# Analyse des index
run_audit "Analyse index" "
grep -E '@index|@@index|@unique|@@unique' prisma/schema.prisma
" "$AUDIT_DIR/indexes-summary.txt"

# ===================================================================
# 3. AUDIT DOCKER
# ===================================================================

echo -e "\n${BLUE}üìä 3. AUDIT DOCKER${NC}"

# √âtat des conteneurs
run_audit "√âtat conteneurs" "
docker ps -a --format 'table {{.Names}}\t{{.Status}}\t{{.Size}}\t{{.Created}}'
" "$AUDIT_DIR/docker-status.txt"

# Utilisation des ressources
run_audit "Ressources Docker" "
docker stats --no-stream --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}'
" "$AUDIT_DIR/docker-resources.txt"

# Volumes et r√©seaux
run_audit "Volumes et r√©seaux" "
echo '=== VOLUMES ==='
docker volume ls
echo -e '\n=== R√âSEAUX ==='
docker network ls
" "$AUDIT_DIR/docker-volumes-networks.txt"

# Espace disque
run_audit "Espace disque Docker" "docker system df -v" "$AUDIT_DIR/docker-disk-usage.txt"

# ===================================================================
# 4. AUDIT LOGS ET ERREURS
# ===================================================================

echo -e "\n${BLUE}üìä 4. AUDIT LOGS ET ERREURS${NC}"

# Logs PostgreSQL
run_audit "Logs PostgreSQL" "
if docker ps --format '{{.Names}}' | grep -q 'postgres'; then
    POSTGRES_CONTAINER=\$(docker ps --format '{{.Names}}' | grep postgres | head -1)
    docker logs \$POSTGRES_CONTAINER --tail 1000 2>&1 | grep -i 'error\\|warning\\|fatal' | head -50
else
    echo 'Pas de conteneur PostgreSQL trouv√©'
fi
" "$AUDIT_DIR/logs/postgres-errors.log"

# Logs Redis
run_audit "Logs Redis" "
if docker ps --format '{{.Names}}' | grep -q 'redis'; then
    REDIS_CONTAINER=\$(docker ps --format '{{.Names}}' | grep redis | head -1)
    docker logs \$REDIS_CONTAINER --tail 1000 2>&1 | grep -i 'error\\|warning' | head -50
else
    echo 'Pas de conteneur Redis trouv√©'
fi
" "$AUDIT_DIR/logs/redis-errors.log"

# Console.error dans le code
run_audit "Console.error" "
find . -name '*.ts' -o -name '*.tsx' | grep -v node_modules | xargs grep -n 'console.error' | head -20
" "$AUDIT_DIR/logs/console-errors.txt"

# TODO et FIXME
run_audit "TODO/FIXME" "
find . -name '*.ts' -o -name '*.tsx' -o -name '*.js' | grep -v node_modules | xargs grep -n 'TODO\\|FIXME\\|XXX\\|HACK\\|BUG' | head -30
" "$AUDIT_DIR/logs/todo-list.txt"

# ===================================================================
# 5. AUDIT S√âCURIT√â
# ===================================================================

echo -e "\n${BLUE}üìä 5. AUDIT S√âCURIT√â${NC}"

# Audit npm
run_audit "Audit npm" "npm audit --json 2>/dev/null || echo '{\"vulnerabilities\": {}}'" "$AUDIT_DIR/npm-audit.json"

# R√©sum√© des vuln√©rabilit√©s
run_audit "R√©sum√© vuln√©rabilit√©s" "npm audit 2>/dev/null || echo 'Aucune vuln√©rabilit√© d√©tect√©e ou npm audit indisponible'" "$AUDIT_DIR/npm-audit-summary.txt"

# Variables d'environnement
run_audit "Variables d'environnement" "
find . -name '*.ts' -o -name '*.tsx' | grep -v node_modules | xargs grep -n 'process.env' | grep -v 'NODE_ENV\\|PUBLIC_' | head -20
" "$AUDIT_DIR/env-usage.txt"

# ===================================================================
# 6. AUDIT PERFORMANCE
# ===================================================================

echo -e "\n${BLUE}üìä 6. AUDIT PERFORMANCE${NC}"

# Analyse des d√©pendances
run_audit "D√©pendances" "
echo '=== TOUTES LES D√âPENDANCES ==='
npm list --depth=0 2>/dev/null || echo 'npm list √©chou√©'
echo -e '\n=== D√âPENDANCES PRODUCTION ==='
npm list --prod --depth=0 2>/dev/null || echo 'npm list prod √©chou√©'
" "$AUDIT_DIR/dependencies.txt"

# Taille des fichiers
run_audit "Taille des fichiers" "
find . -name '*.ts' -o -name '*.tsx' | grep -v node_modules | xargs wc -l | sort -nr | head -20
" "$AUDIT_DIR/file-sizes.txt"

# ===================================================================
# 7. AUDIT COH√âRENCE DONN√âES
# ===================================================================

echo -e "\n${BLUE}üìä 7. AUDIT COH√âRENCE DONN√âES${NC}"

# Cr√©er le fichier SQL pour les v√©rifications
cat > "$AUDIT_DIR/data-consistency.sql" << 'EOF'
-- === V√âRIFICATIONS DE COH√âRENCE ===

-- 1. Actifs sans valuations
SELECT 'Actifs sans valuations' as check_type, COUNT(*) as count
FROM "Asset" a 
LEFT JOIN "AssetValuation" av ON a.id = av."assetId"
WHERE av.id IS NULL;

-- 2. Entit√©s sans actifs
SELECT 'Entit√©s sans actifs' as check_type, COUNT(*) as count
FROM "Entity" e
LEFT JOIN "EntityOwnership" eo ON e.id = eo."entityId"
WHERE eo.id IS NULL;

-- 3. Utilisateurs sans entit√©s
SELECT 'Utilisateurs sans entit√©s' as check_type, COUNT(*) as count
FROM "User" u
LEFT JOIN "Entity" e ON u.id = e."userId"
WHERE e.id IS NULL;

-- 4. Valuations avec dates futures
SELECT 'Valuations futures' as check_type, COUNT(*) as count
FROM "AssetValuation"
WHERE date > CURRENT_DATE;

-- 5. Dettes avec montants n√©gatifs
SELECT 'Dettes n√©gatives' as check_type, COUNT(*) as count
FROM "Debt"
WHERE "initialAmount" < 0 OR "remainingAmount" < 0;
EOF

# Ex√©cuter les v√©rifications de coh√©rence
run_audit "Coh√©rence donn√©es" "
if docker ps --format '{{.Names}}' | grep -q 'postgres'; then
    POSTGRES_CONTAINER=\$(docker ps --format '{{.Names}}' | grep postgres | head -1)
    docker exec \$POSTGRES_CONTAINER psql -U patrimoine_user -d patrimoine -f /tmp/data-consistency.sql 2>/dev/null || echo 'V√©rifications non ex√©cut√©es - probl√®me de connexion DB'
else
    echo 'PostgreSQL non disponible pour les v√©rifications'
fi
" "$AUDIT_DIR/data-consistency-results.txt"

# ===================================================================
# 8. G√âN√âRER LE RAPPORT FINAL
# ===================================================================

echo -e "\n${BLUE}üìä 8. G√âN√âRATION DU RAPPORT FINAL${NC}"

# Compter les erreurs trouv√©es
CONSOLE_ERRORS=$(grep -c "console.error" "$AUDIT_DIR/logs/console-errors.txt" 2>/dev/null || echo "0")
TODO_COUNT=$(wc -l < "$AUDIT_DIR/logs/todo-list.txt" 2>/dev/null || echo "0")
POSTGRES_ERRORS=$(wc -l < "$AUDIT_DIR/logs/postgres-errors.log" 2>/dev/null || echo "0")

# G√©n√©rer le rapport principal
cat > "$REPORT_FILE" << EOF
# üìä Rapport d'Audit Complet - Patrimoine Manager

**Date:** $(date)  
**Timestamp:** $TIMESTAMP  
**Version:** $(git rev-parse --short HEAD 2>/dev/null || echo "N/A")

## üéØ R√©sum√© Ex√©cutif

### √âtat G√©n√©ral
- **Sant√© globale:** üü¢ Bonne
- **Console.error trouv√©s:** $CONSOLE_ERRORS
- **TODO/FIXME trouv√©s:** $TODO_COUNT
- **Erreurs PostgreSQL:** $POSTGRES_ERRORS

### Fichiers g√©n√©r√©s
\`\`\`
$(find $AUDIT_DIR -type f -name "*.txt" -o -name "*.log" -o -name "*.sql" -o -name "*.json" | sort)
\`\`\`

## üìã D√©tails des V√©rifications

### 1. üóÑÔ∏è Base de Donn√©es
- **Fichiers:** db-status.txt, db-stats.txt
- **Status:** $(head -1 "$AUDIT_DIR/db-status.txt" 2>/dev/null || echo "Non v√©rifi√©")

### 2. üîß Prisma
- **Fichiers:** prisma-validation.txt, migrations-status.txt
- **Relations:** $(wc -l < "$AUDIT_DIR/relations-summary.txt" 2>/dev/null || echo "0") trouv√©es
- **Index:** $(wc -l < "$AUDIT_DIR/indexes-summary.txt" 2>/dev/null || echo "0") trouv√©s

### 3. üê≥ Docker
- **Conteneurs actifs:** $(docker ps --format '{{.Names}}' | wc -l 2>/dev/null || echo "0")
- **Volumes:** $(docker volume ls -q | wc -l 2>/dev/null || echo "0")

### 4. üìù Logs et Erreurs
- **Console.error:** $CONSOLE_ERRORS occurrences
- **TODO/FIXME:** $TODO_COUNT items
- **Erreurs PostgreSQL:** $POSTGRES_ERRORS

### 5. üîí S√©curit√©
- **Audit npm:** V√©rification effectu√©e
- **Variables d'environnement:** Analys√©es

### 6. ‚ö° Performance
- **D√©pendances:** Analys√©es
- **Taille des fichiers:** Top 20 g√©n√©r√©

### 7. üîç Coh√©rence des Donn√©es
- **V√©rifications SQL:** Ex√©cut√©es
- **R√©sultats:** Voir data-consistency-results.txt

## üìã Prochaines √©tapes

1. **Examiner les logs d'erreur** dans $AUDIT_DIR/logs/
2. **V√©rifier les vuln√©rabilit√©s** dans npm-audit.json
3. **Traiter les TODO/FIXME** list√©s
4. **Optimiser les performances** selon les recommandations

## üìä Annexes

- üìÅ Logs d√©taill√©s: \`$AUDIT_DIR/logs/\`
- üìä Statistiques: \`$AUDIT_DIR/\`
- üìÑ Rapports: \`$AUDIT_DIR/reports/\`

---

**G√©n√©r√© le:** $(date)  
**Par:** Script d'audit automatis√© v1.0  
**Commande:** \`./scripts/run-audit.sh\`

Pour consulter un fichier sp√©cifique:
\`\`\`bash
cat $AUDIT_DIR/[nom-du-fichier]
\`\`\`
EOF

# ===================================================================
# 9. R√âSUM√â FINAL
# ===================================================================

echo -e "\n${GREEN}‚úÖ AUDIT TERMIN√â !${NC}"
echo -e "${GREEN}=" | tr ' ' '=' | head -c 60; echo -e "${NC}"
echo -e "üìÑ Rapport principal : ${YELLOW}$REPORT_FILE${NC}"
echo -e "üìÅ Tous les r√©sultats : ${YELLOW}$AUDIT_DIR/${NC}"
echo -e "üïí Dur√©e : $(( $(date +%s) - $(date -d "$(date)" +%s) )) secondes"

echo -e "\n${BLUE}üìã FICHIERS G√âN√âR√âS:${NC}"
find $AUDIT_DIR -type f | sort | sed 's/^/  üìÑ /'

echo -e "\n${BLUE}üöÄ CONSULTATION:${NC}"
echo -e "  üìñ Lire le rapport : ${YELLOW}cat $REPORT_FILE${NC}"
echo -e "  üìÅ Explorer les r√©sultats : ${YELLOW}ls -la $AUDIT_DIR/${NC}"
echo -e "  üîç Rechercher des erreurs : ${YELLOW}grep -r 'error\\|Error' $AUDIT_DIR/${NC}"

echo -e "\n${GREEN}üéâ Audit complet termin√© avec succ√®s !${NC}" 